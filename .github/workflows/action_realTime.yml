name: Run Real Time Data

on:
  schedule:
    - cron: "*/15 * * * *"  
  workflow_dispatch:      # Para ejecutarlo manualmente

jobs:
  real_time:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_ACTION }}
          fetch-depth: 0 
          ref: main

      - name: Configurar Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false
          environment-name: myenv
          python-version: '3.10'
          channels: conda-forge

      - name: Instalar dependencias y run Real Time 
        shell: bash -l {0}
        run: |
          conda install -y pip papermill ipykernel pandas numpy scikit-learn yfinance
          pip install backtesting
          python -m ipykernel install --user --name python3
          mkdir -p data
          papermill downLoadDataRealtimeAlpha.ipynb /dev/null -k python3
      
      - name: Upload dataxd.txt
        uses: actions/upload-artifact@v4
        with:
          name: realtime-data-xd
          path: data/dataxd.txt

      - name: Upload dataxh.txt
        uses: actions/upload-artifact@v4
        with:
          name: realtime-data-xh
          path: data/dataxh.txt

  pm40:
    needs: real_time
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_ACTION }}
          fetch-depth: 0 
          ref: main

      - name: Descargar dataxh.txt de real_time
        uses: actions/download-artifact@v4
        with:
          name: realtime-data-xh
          path: data

      - name: Colocar dataxh.txt en data/dataxh.txt
        run: |
          find data -type f -name dataxh.txt -exec mv {} data/dataxh.txt \;

      - name: Configurar Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: false
          environment-name: myenv
          python-version: '3.10'
          channels: conda-forge

      - name: Install dependencias y Ejecutar Promedio Movil
        shell: bash -l {0}
        run: |
          conda install -y papermill ipykernel pandas numpy scikit-learn yfinance ta-lib
          pip install backtesting
          python -m ipykernel install --user --name python3
          mkdir -p data/backtesting
          papermill PM40_PromedioMovil40.ipynb /dev/null -k python3

      - name: Upload pm40_h.txt
        uses: actions/upload-artifact@v4
        with:
          name: pm40-data-txt
          path: data/pm40_h.txt

      - name: Upload backtesting files
        uses: actions/upload-artifact@v4
        with:
          name: pm40-backtesting
          path: |
            data/backtesting/trades_pm40.txt
            data/backtesting/estadisticas_pm40.txt

  publish:
    name: Publicar resultados finales
    needs:
      - real_time
      - pm40
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GIT_ACTION }}
          fetch-depth: 0

      - name: Configurar Git
        run: |
          git config user.email "kaliinversionesyservicios@gmail.com"
          git config user.name "kaliinversionesyservicios"

      - name: Descargar todos los artifacts de datos
        uses: actions/download-artifact@v4
        with:
          path: data

      - name: Ver estructura de data/
        run: |
          echo "--- listing data/ ---"
          ls -R data


      - name: Mover artifacts a la carpeta data ra√≠z
        run: |
          mv data/realtime-data-xd/dataxd.txt data/dataxd.txt
          mv data/realtime-data-xh/dataxh.txt data/dataxh.txt
          mv data/pm40-data-txt/pm40_h.txt data/pm40_h.txt
          mv data/pm40-backtesting/data/backtesting/estadisticas_pm40.txt data/backtesting/estadisticas_pm40.txt
          mv data/pm40-backtesting/data/backtesting/trades_pm40.txt data/backtesting/trades_pm40.txt

      - name: Ver archivos finales en data/
        run: |
          ls -lh data
          ls -lh data/backtesting


      - name: Ver cambios
        run: git status

      - name: Commit y push
        run: |
          git add .
          git commit -m "Update todos los notebooks" || echo "No changes"
          git pull --rebase origin main
          git push origin HEAD:main






